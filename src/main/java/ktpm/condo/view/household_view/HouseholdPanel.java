package ktpm.condo.view.household_view;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import ktpm.condo.controller.household_controller.HouseholdController;
import ktpm.condo.model.entity.Household;
import ktpm.condo.view.BasePanel;
import ktpm.condo.view.DashboardPanel;

/**
 * Giao di·ªán Swing ƒë·ªÉ qu·∫£n l√Ω danh s√°ch h·ªô kh·∫©u trong h·ªá th·ªëng.
 */
public class HouseholdPanel extends BasePanel {
    private final HouseholdController controller = new HouseholdController();
    private JTable table;
    private DefaultTableModel tableModel;
    private final JFrame parentFrame;

    /**
     * Kh·ªüi t·∫°o HouseholdPanel k√®m tham chi·∫øu JFrame ch√≠nh.
     *
     * @param parentFrame c·ª≠a s·ªï ch√≠nh ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
     */
    public HouseholdPanel(JFrame parentFrame) {
        this.parentFrame = parentFrame;
        setLayout(new BorderLayout());

        tableModel = new DefaultTableModel(
            new Object[]{"ID", "CƒÉn h·ªô", "M√£ h·ªô", "S·ªë th√†nh vi√™n"}, 0);
        table = createTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        JButton btnAdd = createButton("Th√™m h·ªô");
        JButton btnDelete = createButton("Xo√° h·ªô");
        JButton btnViewCitizens = createButton("Xem nh√¢n kh·∫©u");
        JButton btnBack = createButton("Quay l·∫°i");

        buttonPanel.add(btnAdd);
        buttonPanel.add(btnDelete);
        buttonPanel.add(btnViewCitizens);
        buttonPanel.add(btnBack);
        add(buttonPanel, BorderLayout.SOUTH);

        btnAdd.addActionListener(e -> addHousehold());
        btnDelete.addActionListener(e -> deleteSelected());
        btnViewCitizens.addActionListener(e -> viewCitizens());
        btnBack.addActionListener(e -> goBack());

        loadData();
    }

    /**
     * Quay l·∫°i giao di·ªán ch√≠nh.
     */
    private void goBack() {
        parentFrame.setTitle("H·ªá th·ªëng qu·∫£n l√Ω Chung c∆∞");
        parentFrame.setContentPane(new DashboardPanel(parentFrame));
        parentFrame.revalidate();
        parentFrame.repaint();
    }

    /**
     * T·∫£i d·ªØ li·ªáu h·ªô kh·∫©u t·ª´ controller v√† hi·ªÉn th·ªã.
     */
    public void loadData() {
        tableModel.setRowCount(0);
        List<Household> households = controller.getAllHouseholds();
        for (Household h : households) {
            tableModel.addRow(new Object[]{
                h.getId(),
                h.getApartmentNumber(),
                h.getHouseholdCode(),
                h.getNumberOfMembers()
            });
        }
    }

    /**
     * Hi·ªÉn th·ªã dialog th√™m h·ªô kh·∫©u m·ªõi v·ªõi giao di·ªán ƒë·∫πp.
     */
    private void addHousehold() {
        AddHouseholdDialog dialog = new AddHouseholdDialog(parentFrame);
        dialog.setVisible(true);
        
        if (dialog.isConfirmed()) {
            String apartment = dialog.getApartmentText();
            String code = dialog.getHouseholdCodeText();
            
            if (controller.addHousehold(apartment, code)) {
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi style ƒë·∫πp
                String successMessage = String.format(
                    "‚úÖ ƒê√£ th√™m h·ªô kh·∫©u th√†nh c√¥ng!\n\n" +
                    "üìç CƒÉn h·ªô: %s\n" +
                    "üè∑Ô∏è M√£ h·ªô: %s\n\n" +
                    "H·ªô kh·∫©u ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng.",
                    apartment, code
                );
                
                JOptionPane.showMessageDialog(this, 
                    successMessage, 
                    "Th√†nh c√¥ng", 
                    JOptionPane.INFORMATION_MESSAGE
                );
                loadData();
            } else {
                // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói v·ªõi style ƒë·∫πp
                String errorMessage = 
                    "‚ùå Th√™m h·ªô kh·∫©u th·∫•t b·∫°i!\n\n" +
                    "C√≥ th·ªÉ do:\n" +
                    "‚Ä¢ CƒÉn h·ªô ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng\n" +
                    "‚Ä¢ M√£ h·ªô kh·∫©u ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng\n" +
                    "‚Ä¢ L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu\n\n" +
                    "Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin v√† th·ª≠ l·∫°i.";
                
                JOptionPane.showMessageDialog(this, 
                    errorMessage, 
                    "L·ªói", 
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }

    /**
     * Xo√° h·ªô kh·∫©u ƒë∆∞·ª£c ch·ªçn n·∫øu x√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng.
     */
    private void deleteSelected() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int) tableModel.getValueAt(selectedRow, 0);
            String apartment = (String) tableModel.getValueAt(selectedRow, 1);
            String householdCode = (String) tableModel.getValueAt(selectedRow, 2);
            int memberCount = (int) tableModel.getValueAt(selectedRow, 3);
            
            // T·∫°o th√¥ng b√°o x√°c nh·∫≠n v·ªõi th√¥ng tin chi ti·∫øt
            String confirmMessage = String.format(
                "‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° h·ªô kh·∫©u n√†y?\n\n" +
                "üìç CƒÉn h·ªô: %s\n" +
                "üè∑Ô∏è M√£ h·ªô: %s\n" +
                "üë• S·ªë th√†nh vi√™n: %d\n\n" +
                "‚ö†Ô∏è L∆∞u √Ω: Vi·ªác xo√° s·∫Ω kh√¥ng th·ªÉ ho√†n t√°c!",
                apartment, householdCode, memberCount
            );
            
            int confirm = JOptionPane.showConfirmDialog(
                this, 
                confirmMessage, 
                "X√°c nh·∫≠n xo√° h·ªô kh·∫©u", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
            );
            
            if (confirm == JOptionPane.YES_OPTION) {
                if (controller.deleteHousehold(id)) {
                    String successMessage = String.format(
                        "‚úÖ ƒê√£ xo√° h·ªô kh·∫©u th√†nh c√¥ng!\n\n" +
                        "CƒÉn h·ªô %s (M√£: %s) ƒë√£ ƒë∆∞·ª£c xo√° kh·ªèi h·ªá th·ªëng.",
                        apartment, householdCode
                    );
                    
                    JOptionPane.showMessageDialog(this, 
                        successMessage, 
                        "Xo√° th√†nh c√¥ng", 
                        JOptionPane.INFORMATION_MESSAGE
                    );
                    loadData();
                } else {
                    String errorMessage = 
                        "‚ùå Kh√¥ng th·ªÉ xo√° h·ªô kh·∫©u!\n\n" +
                        "C√≥ th·ªÉ do:\n" +
                        "‚Ä¢ H·ªô kh·∫©u ƒëang c√≥ r√†ng bu·ªôc d·ªØ li·ªáu\n" +
                        "‚Ä¢ L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu\n" +
                        "‚Ä¢ H·ªô kh·∫©u kh√¥ng t·ªìn t·∫°i\n\n" +
                        "Vui l√≤ng ki·ªÉm tra l·∫°i v√† th·ª≠ l·∫°i.";
                    
                    JOptionPane.showMessageDialog(this, 
                        errorMessage, 
                        "L·ªói", 
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, 
                "‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt h·ªô kh·∫©u ƒë·ªÉ xo√°!\n\n" +
                "Nh·∫•p v√†o m·ªôt d√≤ng trong b·∫£ng ƒë·ªÉ ch·ªçn h·ªô kh·∫©u c·∫ßn xo√°.",
                "Ch∆∞a ch·ªçn h·ªô kh·∫©u", 
                JOptionPane.WARNING_MESSAGE
            );
        }
    }

    /**
     * Hi·ªÉn th·ªã danh s√°ch nh√¢n kh·∫©u thu·ªôc h·ªô kh·∫©u ƒë∆∞·ª£c ch·ªçn.
     */
    private void viewCitizens() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            int householdId = (int) tableModel.getValueAt(selectedRow, 0);
            String apartment = (String) tableModel.getValueAt(selectedRow, 1);
            String householdCode = (String) tableModel.getValueAt(selectedRow, 2);
            
            JDialog dialog = new JDialog(
                (JFrame) SwingUtilities.getWindowAncestor(this), 
                String.format("Nh√¢n kh·∫©u - CƒÉn h·ªô %s (%s)", apartment, householdCode), 
                true
            );
            dialog.setSize(600, 400);
            dialog.setLocationRelativeTo(null);
            dialog.setContentPane(new CitizenPanel(householdId, this));
            dialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, 
                "‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt h·ªô kh·∫©u ƒë·ªÉ xem nh√¢n kh·∫©u!\n\n" +
                "Nh·∫•p v√†o m·ªôt d√≤ng trong b·∫£ng ƒë·ªÉ ch·ªçn h·ªô kh·∫©u c·∫ßn xem.",
                "Ch∆∞a ch·ªçn h·ªô kh·∫©u", 
                JOptionPane.WARNING_MESSAGE
            );
        }
    }
}